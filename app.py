from pprint import pprint
from typing import Optional, Dict

import requests
import openai
import pandas as pd

import config as cfg


def get_response_api(woeid: int) -> Optional[Dict]:
    """Gets the weather response from the hgbrasil API.

    Args:
        woeid (int): City WOEID code.

    Returns:
        Optional[Dict]: Dictionary with answer information.
    """
    url = f"https://api.hgbrasil.com/weather?woeid={woeid}"
    response = requests.get(url)
    if response.status_code != 200:
        return None
    return response.json()


def get_info_city(woeid: int) -> Dict:
    """Gets weather information for a city.

    Args:
        woeid (int): City WOEID code.

    Returns:
        Dict: Dictionary with city climate information.
    """
    info = {}
    response = get_response_api(woeid)
    if not response:
        return info
    info["date"] = response["results"]["date"]
    info["temperature"] = response["results"]["temp"]
    info["description"] = response["results"]["description"]
    info["currently"] = response["results"]["currently"]
    info["humidity"] = response["results"]["humidity"]

    forecast = response["results"]["forecast"]
    info["tomorrow"] = {
        "date": forecast[1]["date"],
        "weekday": forecast[1]["weekday"],
        "max": forecast[1]["max"],
        "min": forecast[1]["min"],
        "description": forecast[1]["description"]
    }
    return info


def generate_ai_news(openai_api_key: str, content_user: str) -> str:
    """Generates news using artificial intelligence from the OPENAI API.

    Args:
        openai_api_key (str): User API Key
        content_user (str): Text with city weather information.

    Returns:
        str: Message generated by artificial intelligence.
    """
    openai.api_key = openai_api_key
    content_system = "Você é um jornalista que expõe notícias climáticas de "\
                     "modo humoristico. Máximo 150 caracters."
    completion = openai.ChatCompletion.create(
        model="gpt-4",
        messages=[
            {
                "role": "system",
                "content": content_system
            },
            {
                "role": "user",
                "content": content_user
            }
        ]
    )
    return completion.choices[0].message.content.strip('"')


OPENAI_API_KEY = cfg.OPENAI_API_KEY

woeid_cities = {
    'Brasília': 455819,
    'São Paulo': 455827,
    'Fortaleza': 455830,
    'Porto Alegre': 455823,
    'Belém': 455820
}

info_final = {"city": [],
              "date": [],
              "currently": [],
              "temperature": [],
              "humidity": [],
              "description": [],
              "message": []}

for city, woeid in woeid_cities.items():
    info_city = get_info_city(woeid)
    print(city)
    pprint(info_city)
    if info_city:
        date = info_city["date"]
        currently = info_city["currently"]
        temperature = info_city["temperature"]
        humidity = info_city["humidity"]
        description = info_city["description"]
        tomorrow = info_city["tomorrow"]
        content_user = f"Crie uma mensagem para a população de {city}. "\
                       f"Com a data da verificação {date} e o "\
                       f"período {currently}\n As condições climáticas são: "\
                       f"temperatura: {temperature}, umidade: {humidity} e "\
                       f"descrição: {description}\nTambém dê a notícia da "\
                       f"previsão para amanhã. As infromações são: \n"\
                       f"Data: {tomorrow['date']}, "\
                       f"dia da semana: {tomorrow['weekday']}, "\
                       f" max: {tomorrow['max']}, min: {tomorrow['min']} e "\
                       f"descrição: {tomorrow['description']}"
        message = generate_ai_news(OPENAI_API_KEY, content_user)
    else:
        date = None
        currently = None
        temp = None
        humidity = None
        description = None
        message = None
    print(f"{message}\n")
    info_final["city"].append(city)
    info_final["date"].append(date)
    info_final["currently"].append(currently)
    info_final["temperature"].append(temperature)
    info_final["description"].append(description)
    info_final["humidity"].append(humidity)
    info_final["message"].append(message)

df = pd.DataFrame(info_final)
df.to_csv("info_temperature_cities.csv", sep=";", index=False)